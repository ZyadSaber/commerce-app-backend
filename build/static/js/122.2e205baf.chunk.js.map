{"version":3,"file":"static/js/122.2e205baf.chunk.js","mappings":"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","sources":["packages/input-number/style.ts","packages/input-number/index.tsx","packages/pages-parents-page/Partials/ModalView.tsx","packages/pages-parents-page/constants.ts","packages/pages-parents-page/component.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { InputNumber } from \"antd\";\r\nimport { primaryColors } from \"../constants\";\r\nimport { inputNumberProp } from \"./interface\";\r\n\r\nexport const StyledInput = styled(InputNumber)<inputNumberProp>`\r\n  width: 100%;\r\n  /* padding: 5px 7px; */\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  transition: border-color 0.3s;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  /* ${({ required }) =>\r\n    required && `background-color:  ${primaryColors.required}`}; */\r\n\r\n  &:focus {\r\n    outline: none !important;\r\n    border-color: #007bff;\r\n  }\r\n`;\r\n","import { memo, useCallback } from \"react\";\r\nimport FloatingLabel from \"../floating-label\";\r\nimport { StyledInput } from \"./style\";\r\nimport { inputNumberProp } from \"./interface\";\r\n\r\nconst InputNumber = ({\r\n  disabled,\r\n  value,\r\n  name,\r\n  label,\r\n  onChange,\r\n  height,\r\n  width = \"200px\",\r\n  margin,\r\n  max,\r\n  min = 0,\r\n  fixedBy = 2,\r\n  ...props\r\n}: inputNumberProp) => {\r\n  const handleChange = useCallback(\r\n    (_: any) => {\r\n      onChange({ name: name, value: +_.toFixed(fixedBy) });\r\n    },\r\n    [fixedBy, name, onChange]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FloatingLabel\r\n        label={label}\r\n        width={width}\r\n        height={height}\r\n        margin={margin}\r\n        hasContent={!!value?.toString()}\r\n      >\r\n        <StyledInput\r\n          disabled={disabled}\r\n          value={value}\r\n          name={name}\r\n          onChange={handleChange}\r\n          margin={margin}\r\n          max={max}\r\n          min={min}\r\n          fixedBy={fixedBy}\r\n          {...props}\r\n        />\r\n      </FloatingLabel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(InputNumber);\r\nexport * from \"./interface\";\r\n","import { memo, useCallback } from \"react\";\r\nimport { useFormManager } from \"../../hooks\";\r\nimport InputText from \"../../input-text\";\r\nimport CheckBox from \"../../check-box\";\r\nimport Flex from \"../../flex\";\r\nimport CreateNotification from \"../../notification\";\r\nimport InputNumber from \"../../input-number\";\r\nimport Modal from \"../../modal\";\r\nimport { ModalViewProp } from \"../../types\";\r\n\r\nconst ModalView = ({\r\n  selectedRecord,\r\n  handleClose,\r\n  handleSaveRecord,\r\n  loading,\r\n  visible,\r\n  fetchTableData,\r\n}: ModalViewProp) => {\r\n  const { state, onChange } = useFormManager({\r\n    initialValues: selectedRecord,\r\n  });\r\n\r\n  const {\r\n    eng_page_parent_name,\r\n    arab_page_parent_name,\r\n    hidden,\r\n    page_parent_index,\r\n  } = state;\r\n\r\n  const handleSave = useCallback(() => {\r\n    handleSaveRecord({\r\n      data: state,\r\n      cb: ({ error }) => {\r\n        if (error) {\r\n          return CreateNotification(\"error\", error.message);\r\n        }\r\n        handleClose();\r\n        fetchTableData();\r\n        CreateNotification(\"success\");\r\n      },\r\n    });\r\n  }, [fetchTableData, handleClose, handleSaveRecord, state]);\r\n\r\n  return (\r\n    <Modal\r\n      label=\"dtls\"\r\n      onClose={handleClose}\r\n      onOK={handleSave}\r\n      loading={loading}\r\n      visible={visible}\r\n    >\r\n      <Flex width=\"100%\" align=\"center\" wrap gap=\"10px\">\r\n        <InputText\r\n          name=\"eng_page_parent_name\"\r\n          onChange={onChange}\r\n          value={eng_page_parent_name}\r\n          label=\"englshnm\"\r\n          width=\"49%\"\r\n        />\r\n        <InputText\r\n          name=\"arab_page_parent_name\"\r\n          onChange={onChange}\r\n          value={arab_page_parent_name}\r\n          width=\"49%\"\r\n          label=\"arbcnm\"\r\n        />\r\n        <InputNumber\r\n          name=\"page_parent_index\"\r\n          onChange={onChange}\r\n          value={page_parent_index}\r\n          label=\"indx\"\r\n          width=\"49%\"\r\n        />\r\n        <CheckBox\r\n          name=\"hidden\"\r\n          onChange={onChange}\r\n          checked={hidden}\r\n          label=\"hdn\"\r\n        />\r\n      </Flex>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(ModalView);\r\n","export const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"page_parent_id\",\r\n    width: \"9%\",\r\n  },\r\n  {\r\n    title: \"englshnm\",\r\n    dataIndex: \"eng_page_parent_name\",\r\n    width: \"40%\",\r\n  },\r\n  {\r\n    title: \"arbcnm\",\r\n    dataIndex: \"arab_page_parent_name\",\r\n    width: \"40%\",\r\n  },\r\n  {\r\n    title: \"indx\",\r\n    dataIndex: \"page_parent_index\",\r\n    width: \"4%\",\r\n  },\r\n  {\r\n    title: \"hdn\",\r\n    dataIndex: \"hidden\",\r\n    width: \"4%\",\r\n  },\r\n];\r\n","import { memo } from \"react\";\r\nimport { PageTitle } from \"../page-title\";\r\nimport TableWithApi, {\r\n  useTableControlsButtons,\r\n  useCreateTableActionRef,\r\n} from \"../table-with-api-query\";\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { columns } from \"./constants\";\r\n\r\nconst PagesPage = () => {\r\n  const { tableRef, fetchTableData } = useCreateTableActionRef();\r\n\r\n  const {\r\n    selectedRecord,\r\n    setSelectedRecord,\r\n    visible,\r\n    handleClose,\r\n    handleAdd,\r\n    handleEdit,\r\n    handleDelete,\r\n    handleSaveRecord,\r\n    loading,\r\n  } = useTableControlsButtons({\r\n    apiId: \"POST_PAGE_PARENT_TABLE_DATA\",\r\n    runFetch: fetchTableData,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PageTitle children=\"pgsprntspg\" />\r\n      <TableWithApi\r\n        //@ts-ignore\r\n        ref={tableRef}\r\n        apiId=\"QUERY_PAGE_PARENT_TABLE_DATA\"\r\n        columns={columns}\r\n        fetchOnFirstRun\r\n        rowKey=\"page_parent_id\"\r\n        onSelectedRow={setSelectedRecord}\r\n        hideTools={false}\r\n        canAdd\r\n        canDelete\r\n        canEdit\r\n        handleAdd={handleAdd}\r\n        handleEdit={handleEdit}\r\n        handleDelete={handleDelete}\r\n      />\r\n      {visible && (\r\n        <ModalView\r\n          visible={visible}\r\n          selectedRecord={selectedRecord}\r\n          handleClose={handleClose}\r\n          handleSaveRecord={handleSaveRecord}\r\n          loading={loading}\r\n          fetchTableData={fetchTableData}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(PagesPage);\r\n"],"names":["StyledInput","styled","InputNumber","_templateObject","_taggedTemplateLiteral","_ref","required","concat","primaryColors","disabled","value","name","label","onChange","height","width","margin","max","min","fixedBy","props","handleChange","useCallback","_","toFixed","_jsx","_Fragment","children","FloatingLabel","hasContent","toString","memo","ModalView","selectedRecord","handleClose","handleSaveRecord","loading","visible","fetchTableData","state","useFormManager","initialValues","eng_page_parent_name","arab_page_parent_name","hidden","page_parent_index","handleSave","data","cb","_ref2","error","CreateNotification","message","Modal","onClose","onOK","_jsxs","Flex","align","wrap","gap","InputText","CheckBox","checked","columns","title","dataIndex","PagesPage","tableRef","useCreateTableActionRef","setSelectedRecord","handleAdd","handleEdit","handleDelete","useTableControlsButtons","apiId","runFetch","PageTitle","TableWithApi","ref","fetchOnFirstRun","rowKey","onSelectedRow","hideTools","canAdd","canDelete","canEdit"],"sourceRoot":""}