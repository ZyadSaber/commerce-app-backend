{"version":3,"file":"static/js/82.f37ab518.chunk.js","mappings":"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","sources":["packages/search-and-clear-button/index.tsx","packages/users-page/Partials/LinkedPages.tsx","packages/users-page/Partials/ModalView.tsx","packages/users-page/constants.ts","packages/users-page/component.tsx"],"sourcesContent":["import { memo } from \"react\";\r\nimport Button from \"../button\";\r\nimport Flex from \"../flex\";\r\nimport { SearchAndClearButtonProp } from \"./interface\"\r\n\r\nconst SearchAndClearButton = ({\r\n  width,\r\n  onSearch,\r\n  margin = \"0\",\r\n  onClear,\r\n  noSearch,\r\n  noClear,\r\n  disabled,\r\n}: SearchAndClearButtonProp) => {\r\n\r\n  return (\r\n    <Flex\r\n      width={width}\r\n      wrap\r\n      justifyContent=\"space-between\"\r\n      margin={margin}\r\n      align=\"center\">\r\n\r\n      <Button\r\n        hidden={noSearch}\r\n        disabled={disabled}\r\n        icon=\"search\"\r\n        onClick={onSearch}\r\n        label=\"srch\"\r\n        width={noClear ? \"100%\" : \"70%\"}\r\n      />\r\n\r\n      <Button\r\n        width={noSearch ? \"100%\" : \"25%\"}\r\n        hidden={noClear}\r\n        disabled={disabled}\r\n        icon=\"clear\"\r\n        onClick={onClear}\r\n        backGround=\"white\"\r\n        padding=\"5px 15px\"\r\n      />\r\n\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(SearchAndClearButton);","import { memo, useCallback, useState } from \"react\";\r\nimport Flex from \"../../flex\";\r\nimport Button from \"../../button\";\r\nimport { useFetch, useMutation } from \"../../hooks\";\r\nimport CheckBox from \"../../check-box\";\r\nimport { RecordWithAnyData, onChangeEvent } from \"../../types\";\r\nimport createNotification from \"../../notification\";\r\n\r\nconst LinkedPages = ({ user_id }: { user_id: string | number }) => {\r\n  const [arr, setArr] = useState<RecordWithAnyData[]>([]);\r\n\r\n  const handleResponse = useCallback(\r\n    (data: RecordWithAnyData) => setArr(data?.data),\r\n    [setArr]\r\n  );\r\n\r\n  const { runFetch } = useFetch({\r\n    apiId: \"QUERY_USER_PERMISSIONS\",\r\n    params: {\r\n      user_id,\r\n    },\r\n    fetchOnFirstRun: true,\r\n    checkForParams: true,\r\n    onResponse: handleResponse,\r\n  });\r\n\r\n  const { mutate, loading } = useMutation({\r\n    apiId: \"POST_USER_PERMISSIONS\",\r\n    method: \"POST\",\r\n  });\r\n\r\n  const handleSave = useCallback(() => {\r\n    mutate({\r\n      data: arr,\r\n      cb: ({ error }) => {\r\n        error && createNotification(\"error\", error.message);\r\n        if (!error) {\r\n          runFetch();\r\n          createNotification(\"success\");\r\n        }\r\n      },\r\n    });\r\n  }, [arr, mutate, runFetch]);\r\n\r\n  const handleChangeOptions = useCallback(\r\n    (event: onChangeEvent, page_id: number) => {\r\n      const { name, value } = event;\r\n      const newArr =\r\n        arr &&\r\n        arr.map((item) => {\r\n          if (page_id === item.page_id) {\r\n            return {\r\n              ...item,\r\n              page_permissions: {\r\n                ...item.page_permissions,\r\n                [name]: value,\r\n              },\r\n            };\r\n          }\r\n          return item;\r\n        });\r\n      setArr(newArr);\r\n    },\r\n    [arr]\r\n  );\r\n\r\n  const handleChangeStatus = useCallback(\r\n    (event: onChangeEvent) => {\r\n      const { name, value } = event;\r\n      const newArr =\r\n        arr &&\r\n        arr.map((item) => {\r\n          if (name === item.page_id) {\r\n            return {\r\n              ...item,\r\n              status: value,\r\n            };\r\n          }\r\n          return item;\r\n        });\r\n      setArr(newArr);\r\n    },\r\n    [arr]\r\n  );\r\n\r\n  return (\r\n    <Flex width=\"25%\" wrap align=\"center\" flexDirection=\"column\">\r\n      <Button width=\"80%\" label=\"save\" onClick={handleSave} loading={loading} />\r\n      {arr.length !== 0 &&\r\n        arr.map((record: any) => {\r\n          const { status, page_name, page_link, page_id, page_permissions } =\r\n            record;\r\n\r\n          const { can_add, can_edit, can_delete, can_print } = page_permissions;\r\n\r\n          return (\r\n            <Flex\r\n              width=\"80%\"\r\n              wrap\r\n              flexDirection=\"column\"\r\n              gap=\"10px\"\r\n              bordered\r\n              margin=\"10px 0\"\r\n            >\r\n              <CheckBox\r\n                label={`${page_name} / ${page_link}`}\r\n                checked={status}\r\n                name={page_id}\r\n                onChange={handleChangeStatus}\r\n              />\r\n              <Flex\r\n                width=\"100%\"\r\n                justifyContent=\"center\"\r\n                align=\"center\"\r\n                gap=\"5px\"\r\n                wrap\r\n              >\r\n                {can_add !== undefined && (\r\n                  <CheckBox\r\n                    label=\"add\"\r\n                    checked={can_add}\r\n                    onChange={(e: any) => handleChangeOptions(e, page_id)}\r\n                    name=\"can_add\"\r\n                  />\r\n                )}\r\n                {can_edit !== undefined && (\r\n                  <CheckBox\r\n                    label=\"edit\"\r\n                    checked={can_edit}\r\n                    onChange={(e: any) => handleChangeOptions(e, page_id)}\r\n                    name=\"can_edit\"\r\n                  />\r\n                )}\r\n                {can_delete !== undefined && (\r\n                  <CheckBox\r\n                    label=\"delete\"\r\n                    checked={can_delete}\r\n                    onChange={(e: any) => handleChangeOptions(e, page_id)}\r\n                    name=\"can_delete\"\r\n                  />\r\n                )}\r\n                {can_print !== undefined && (\r\n                  <CheckBox\r\n                    label=\"print\"\r\n                    checked={can_print}\r\n                    onChange={(e: any) => handleChangeOptions(e, page_id)}\r\n                    name=\"can_print\"\r\n                  />\r\n                )}\r\n              </Flex>\r\n            </Flex>\r\n          );\r\n        })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default memo(LinkedPages);\r\n","import { memo, useCallback } from \"react\";\r\nimport { useFormManager } from \"../../hooks\";\r\nimport InputText from \"../../input-text\";\r\nimport Flex from \"../../flex\";\r\nimport CreateNotification from \"../../notification\";\r\nimport Modal from \"../../modal\";\r\nimport { ModalViewProp } from \"../../types\";\r\n\r\nconst ModalView = ({\r\n  selectedRecord,\r\n  handleClose,\r\n  handleSaveRecord,\r\n  loading,\r\n  visible,\r\n  fetchTableData\r\n}: ModalViewProp) => {\r\n\r\n  const { state, onChange } = useFormManager({\r\n    initialValues: {\r\n      ...selectedRecord,\r\n      password: selectedRecord.password || \"\",\r\n      confirm_password: selectedRecord.confirm_password || \"\",\r\n    },\r\n  });\r\n\r\n  const {\r\n    first_name,\r\n    last_name,\r\n    user_name,\r\n    password,\r\n    confirm_password,\r\n  } = state;\r\n\r\n  const handleSave = useCallback(() => {\r\n    if (password === confirm_password) {\r\n      handleSaveRecord({\r\n        data: state,\r\n        cb: ({ error }) => {\r\n          if (error) {\r\n            return CreateNotification(\r\n              \"error\",\r\n              error.message\r\n            )\r\n          }\r\n          handleClose()\r\n          fetchTableData()\r\n          CreateNotification(\r\n            \"success\",\r\n          )\r\n        }\r\n      })\r\n    } else {\r\n      CreateNotification(\"error\", \"Please check your password\")\r\n    }\r\n  }, [confirm_password, fetchTableData, handleClose, handleSaveRecord, password, state]);\r\n\r\n  return (\r\n    <Modal\r\n      label=\"dtls\"\r\n      onClose={handleClose}\r\n      onOK={handleSave}\r\n      loading={loading}\r\n      visible={visible}\r\n    >\r\n      <Flex width=\"100%\" align=\"center\" wrap gap=\"10px\">\r\n        <InputText\r\n          name=\"user_name\"\r\n          onChange={onChange}\r\n          value={user_name}\r\n          label=\"usrnm\"\r\n          width=\"32%\"\r\n        />\r\n        <InputText\r\n          name=\"first_name\"\r\n          onChange={onChange}\r\n          value={first_name}\r\n          width=\"32%\"\r\n          label=\"frstnm\"\r\n        />\r\n        <InputText\r\n          name=\"last_name\"\r\n          onChange={onChange}\r\n          value={last_name}\r\n          width=\"32%\"\r\n          label=\"lstnm\"\r\n        />\r\n        <InputText\r\n          name=\"password\"\r\n          onChange={onChange}\r\n          value={password}\r\n          width=\"49%\"\r\n          label=\"password\"\r\n          type=\"password\"\r\n        />\r\n        <InputText\r\n          name=\"confirm_password\"\r\n          onChange={onChange}\r\n          value={confirm_password}\r\n          width=\"49%\"\r\n          label=\"confirm password\"\r\n          type=\"password\"\r\n        />\r\n      </Flex>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(ModalView);\r\n","export const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"user_id\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"usrnm\",\r\n    dataIndex: \"user_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"frstnm\",\r\n    dataIndex: \"first_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"lstnm\",\r\n    dataIndex: \"last_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"lnge\",\r\n    dataIndex: \"language_name\",\r\n    width: \"7.5%\",\r\n  },\r\n  {\r\n    title: \"sts\",\r\n    dataIndex: \"status\",\r\n    width: \"5%\",\r\n  },\r\n];\r\n","import { memo, useCallback } from \"react\";\r\nimport TableWithApi, { useTableControlsButtons, useCreateTableActionRef } from \"../table-with-api-query\";\r\nimport { useFormManager } from \"../hooks\";\r\nimport Flex from \"../flex\";\r\nimport InputText from \"../input-text\";\r\nimport SearchAndClearButton from \"../search-and-clear-button\"\r\nimport { PageTitle } from \"../page-title\";\r\nimport LinkedPages from \"./Partials/LinkedPages\";\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { columns } from \"./constants\";\r\n\r\nconst Users = () => {\r\n  const {\r\n    state: { user_name, first_name, last_name },\r\n    onChange,\r\n    resetForm\r\n  } = useFormManager({\r\n    initialValues: {\r\n      user_id: \"\",\r\n      user_name: \"\",\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n    },\r\n  });\r\n\r\n  const {\r\n    tableRef,\r\n    fetchTableData,\r\n    resetTable\r\n  } = useCreateTableActionRef()\r\n\r\n  const {\r\n    selectedRecord,\r\n    setSelectedRecord,\r\n    visible,\r\n    handleClose,\r\n    handleAdd,\r\n    handleEdit,\r\n    handleDelete,\r\n    handleSaveRecord,\r\n    loading\r\n  } = useTableControlsButtons({\r\n    apiId: \"POST_USER_TABLE_DATA\",\r\n    runFetch: fetchTableData\r\n  })\r\n\r\n  const { user_id } = selectedRecord || {}\r\n\r\n  const handleSearch = useCallback(() => {\r\n    fetchTableData({\r\n      user_name,\r\n      first_name,\r\n      last_name\r\n    })\r\n  }, [fetchTableData, first_name, last_name, user_name]);\r\n\r\n  const handleReset = useCallback(() => {\r\n    resetTable()\r\n    resetForm()\r\n    setSelectedRecord({})\r\n  }, [resetForm, resetTable, setSelectedRecord])\r\n\r\n  return (\r\n    <>\r\n      <PageTitle children=\"usrstp\" />\r\n      <Flex\r\n        width=\"100%\"\r\n        wrap\r\n        gap=\"10px\"\r\n        align=\"center\"\r\n        padding=\"10px 0\"\r\n        bordered\r\n      >\r\n        <InputText\r\n          value={user_name}\r\n          name=\"user_name\"\r\n          label=\"usrnm\"\r\n          onChange={onChange}\r\n        />\r\n        <InputText\r\n          value={first_name}\r\n          name=\"first_name\"\r\n          label=\"frstnm\"\r\n          onChange={onChange}\r\n        />\r\n        <InputText\r\n          dir=\"rtl\"\r\n          value={last_name}\r\n          name=\"last_name\"\r\n          label=\"lstnm\"\r\n          onChange={onChange}\r\n        />\r\n        <SearchAndClearButton onSearch={handleSearch} onClear={handleReset} />\r\n      </Flex>\r\n      <Flex width=\"100%\" wrap justifyContent=\"space-between\">\r\n        <TableWithApi\r\n          //@ts-ignore\r\n          ref={tableRef}\r\n          apiId=\"QUERY_USERS_TABLE_DATA\"\r\n          columns={columns}\r\n          fetchOnFirstRun\r\n          rowKey=\"user_id\"\r\n          width=\"75%\"\r\n          onSelectedRow={setSelectedRecord}\r\n          disableAutoRefresh\r\n          hideTools={false}\r\n          canAdd\r\n          canDelete\r\n          canEdit\r\n          handleAdd={handleAdd}\r\n          handleEdit={handleEdit}\r\n          handleDelete={handleDelete}\r\n        />\r\n        <LinkedPages user_id={user_id} />\r\n        {visible &&\r\n          <ModalView\r\n            visible={visible}\r\n            selectedRecord={selectedRecord}\r\n            handleClose={handleClose}\r\n            handleSaveRecord={handleSaveRecord}\r\n            loading={loading}\r\n            fetchTableData={fetchTableData}\r\n          />}\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Users);\r\n"],"names":["SearchAndClearButton","_ref","width","onSearch","margin","onClear","noSearch","noClear","disabled","_jsxs","Flex","wrap","justifyContent","align","children","_jsx","Button","hidden","icon","onClick","label","backGround","padding","memo","LinkedPages","user_id","arr","setArr","useState","handleResponse","useCallback","data","runFetch","useFetch","apiId","params","fetchOnFirstRun","checkForParams","onResponse","mutate","loading","useMutation","method","handleSave","cb","_ref2","error","createNotification","message","handleChangeOptions","event","page_id","name","value","newArr","map","item","page_permissions","handleChangeStatus","status","flexDirection","length","record","page_name","page_link","can_add","can_edit","can_delete","can_print","gap","bordered","CheckBox","concat","checked","onChange","undefined","e","ModalView","selectedRecord","handleClose","handleSaveRecord","visible","fetchTableData","state","useFormManager","initialValues","password","confirm_password","first_name","last_name","user_name","CreateNotification","Modal","onClose","onOK","InputText","type","columns","title","dataIndex","Users","resetForm","tableRef","resetTable","useCreateTableActionRef","setSelectedRecord","handleAdd","handleEdit","handleDelete","useTableControlsButtons","handleSearch","handleReset","_Fragment","PageTitle","dir","TableWithApi","ref","rowKey","onSelectedRow","disableAutoRefresh","hideTools","canAdd","canDelete","canEdit"],"sourceRoot":""}