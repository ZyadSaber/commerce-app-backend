{"version":3,"file":"static/js/273.aa94b257.chunk.js","mappings":"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","sources":["packages/labels-page/Partials/LinkedPages.tsx","packages/labels-page/Partials/ModalView.tsx","packages/labels-page/constants.ts","packages/labels-page/component.tsx"],"sourcesContent":["import { memo, useCallback, useState } from \"react\";\r\nimport Flex from \"../../flex\";\r\nimport Button from \"../../button\";\r\nimport { useFetch, useMutation } from \"../../hooks\";\r\nimport CheckBox from \"../../check-box\";\r\nimport { RecordWithAnyData, onChangeEvent } from \"../../types\";\r\nimport createNotification from \"../../notification\";\r\n\r\nconst LinkedPages = ({ label_id }: { label_id: string }) => {\r\n  const [arr, setArr] = useState<RecordWithAnyData[]>([]);\r\n\r\n  const handleResponse = useCallback(\r\n    (data: RecordWithAnyData) => setArr(data?.data),\r\n    [setArr]\r\n  );\r\n\r\n  const { runFetch } = useFetch({\r\n    apiId: \"QUERY_LINKED_LABELS_PAGE\",\r\n    params: {\r\n      label_id,\r\n    },\r\n    fetchOnFirstRun: true,\r\n    checkForParams: true,\r\n    onResponse: handleResponse,\r\n  });\r\n\r\n  const { mutate, loading } = useMutation({\r\n    apiId: \"POST_LINKED_LABELS_PAGE\",\r\n    method: \"POST\",\r\n  });\r\n\r\n  const handleSave = useCallback(() => {\r\n    mutate({\r\n      data: arr,\r\n      cb: ({ error }) => {\r\n        error && createNotification(\"error\", error.message);\r\n        if (!error) {\r\n          runFetch();\r\n          createNotification(\"success\");\r\n        }\r\n      },\r\n    });\r\n  }, [arr, mutate, runFetch]);\r\n\r\n  const handleChangeStatus = useCallback(\r\n    (event: onChangeEvent) => {\r\n      const { name, value } = event;\r\n      const newArr =\r\n        arr &&\r\n        arr.map((item) => {\r\n          if (name === item.linked_id) {\r\n            return {\r\n              ...item,\r\n              status: value,\r\n              query_status: \"u\",\r\n            };\r\n          }\r\n          return item;\r\n        });\r\n      setArr(newArr);\r\n    },\r\n    [arr]\r\n  );\r\n\r\n  return (\r\n    <Flex width=\"24%\" wrap align=\"center\" flexDirection=\"column\">\r\n      <Button width=\"80%\" label=\"save\" onClick={handleSave} loading={loading} />\r\n      {arr.length !== 0 &&\r\n        arr.map((record: any) => {\r\n          const { linked_id, linked_name, status } = record;\r\n\r\n          return (\r\n            <Flex\r\n              width=\"80%\"\r\n              wrap\r\n              flexDirection=\"column\"\r\n              gap=\"10px\"\r\n              bordered\r\n              margin=\"10px 0\"\r\n            >\r\n              <CheckBox\r\n                label={linked_name}\r\n                checked={status}\r\n                name={linked_id}\r\n                onChange={handleChangeStatus}\r\n              />\r\n              <Flex\r\n                width=\"100%\"\r\n                justifyContent=\"center\"\r\n                align=\"center\"\r\n                gap=\"5px\"\r\n                wrap\r\n              ></Flex>\r\n            </Flex>\r\n          );\r\n        })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default memo(LinkedPages);\r\n","import { memo, useCallback } from \"react\";\r\nimport { useFormManager } from \"../../hooks\";\r\nimport InputText from \"../../input-text\";\r\nimport Flex from \"../../flex\";\r\nimport CreateNotification from \"../../notification\";\r\nimport Modal from \"../../modal\";\r\nimport { ModalViewProp } from \"../../types\";\r\n\r\nconst ModalView = ({\r\n  selectedRecord,\r\n  handleClose,\r\n  handleSaveRecord,\r\n  loading,\r\n  visible,\r\n  fetchTableData\r\n}: ModalViewProp) => {\r\n\r\n  const { state, onChange } = useFormManager({\r\n    initialValues: {\r\n      ...selectedRecord,\r\n    },\r\n  });\r\n\r\n  const {\r\n    label_id,\r\n    eng_label,\r\n    arab_label,\r\n    query_status\r\n  } = state;\r\n\r\n  const handleSave = useCallback(() => {\r\n    handleSaveRecord({\r\n      data: state,\r\n      cb: ({ error }) => {\r\n        if (error) {\r\n          return CreateNotification(\r\n            \"error\",\r\n            error.message\r\n          )\r\n        }\r\n        handleClose()\r\n        fetchTableData()\r\n        CreateNotification(\r\n          \"success\",\r\n        )\r\n      }\r\n    })\r\n  }, [fetchTableData, handleClose, handleSaveRecord, state]);\r\n\r\n  return (\r\n    <Modal\r\n      label=\"dtls\"\r\n      onClose={handleClose}\r\n      onOK={handleSave}\r\n      loading={loading}\r\n      visible={visible}\r\n    >\r\n      <Flex width=\"100%\" align=\"center\" wrap gap=\"5px\">\r\n        <InputText\r\n          name=\"label_id\"\r\n          onChange={onChange}\r\n          value={label_id}\r\n          label=\"id\"\r\n          width=\"30%\"\r\n          disabled={query_status === 'u'}\r\n        />\r\n        <InputText\r\n          name=\"eng_label\"\r\n          onChange={onChange}\r\n          value={eng_label}\r\n          width=\"34%\"\r\n          label=\"englshnm\"\r\n        />\r\n        <InputText\r\n          name=\"arab_label\"\r\n          onChange={onChange}\r\n          value={arab_label}\r\n          width=\"34%\"\r\n          label=\"arbcnm\"\r\n        />\r\n      </Flex>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(ModalView);\r\n","export const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"label_id\",\r\n    width: \"22%\",\r\n  },\r\n  {\r\n    title: \"englshnm\",\r\n    dataIndex: \"eng_label\",\r\n    width: \"37.5%\",\r\n  },\r\n  {\r\n    title: \"arbcnm\",\r\n    dataIndex: \"arab_label\",\r\n    width: \"37.5%\",\r\n  },\r\n];\r\n","import { memo } from \"react\";\r\nimport TableWithApi, { useTableControlsButtons, useCreateTableActionRef } from \"../table-with-api-query\";\r\nimport Flex from \"../flex\";\r\nimport { PageTitle } from \"../page-title\";\r\nimport LinkedPages from \"./Partials/LinkedPages\"\r\nimport ModalView from \"./Partials/ModalView\"\r\nimport { columns } from \"./constants\"\r\n\r\nconst LabelPage = () => {\r\n\r\n  const {\r\n    tableRef,\r\n    fetchTableData,\r\n    // resetTable\r\n  } = useCreateTableActionRef()\r\n\r\n  const {\r\n    selectedRecord,\r\n    setSelectedRecord,\r\n    visible,\r\n    handleClose,\r\n    handleAdd,\r\n    handleEdit,\r\n    handleDelete,\r\n    handleSaveRecord,\r\n    loading\r\n  } = useTableControlsButtons({\r\n    apiId: \"POST_LABELS_TABLE_DATA\",\r\n    runFetch: fetchTableData\r\n  })\r\n\r\n  const { label_id } = selectedRecord\r\n\r\n  return (\r\n    <>\r\n      <PageTitle children=\"lblstp\" />\r\n      <Flex width=\"100%\" wrap gap=\"5px\">\r\n        <TableWithApi\r\n          //@ts-ignore\r\n          ref={tableRef}\r\n          apiId=\"QUERY_LABELS_TABLE_DATA\"\r\n          columns={columns}\r\n          fetchOnFirstRun\r\n          rowKey=\"label_id\"\r\n          onSelectedRow={setSelectedRecord}\r\n          disableAutoRefresh\r\n          hideTools={false}\r\n          canAdd\r\n          canDelete\r\n          canEdit\r\n          handleAdd={handleAdd}\r\n          handleEdit={handleEdit}\r\n          handleDelete={handleDelete}\r\n          width=\"75%\"\r\n        />\r\n        <LinkedPages label_id={label_id} />\r\n      </Flex>\r\n      {visible &&\r\n        <ModalView\r\n          visible={visible}\r\n          selectedRecord={selectedRecord}\r\n          handleClose={handleClose}\r\n          handleSaveRecord={handleSaveRecord}\r\n          loading={loading}\r\n          fetchTableData={fetchTableData}\r\n        />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(LabelPage)"],"names":["LinkedPages","_ref","label_id","arr","setArr","useState","handleResponse","useCallback","data","runFetch","useFetch","apiId","params","fetchOnFirstRun","checkForParams","onResponse","mutate","loading","useMutation","method","handleSave","cb","_ref2","error","createNotification","message","handleChangeStatus","event","name","value","newArr","map","item","linked_id","status","query_status","_jsxs","Flex","width","wrap","align","flexDirection","children","_jsx","Button","label","onClick","length","record","linked_name","gap","bordered","margin","CheckBox","checked","onChange","justifyContent","memo","ModalView","selectedRecord","handleClose","handleSaveRecord","visible","fetchTableData","state","useFormManager","initialValues","eng_label","arab_label","CreateNotification","Modal","onClose","onOK","InputText","disabled","columns","title","dataIndex","LabelPage","tableRef","useCreateTableActionRef","setSelectedRecord","handleAdd","handleEdit","handleDelete","useTableControlsButtons","_Fragment","PageTitle","TableWithApi","ref","rowKey","onSelectedRow","disableAutoRefresh","hideTools","canAdd","canDelete","canEdit"],"sourceRoot":""}