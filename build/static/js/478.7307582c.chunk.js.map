{"version":3,"file":"static/js/478.7307582c.chunk.js","mappings":"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","sources":["packages/check-box/style.ts","packages/check-box/index.tsx","packages/notification/index.ts","packages/confirmation-modal/index.tsx","packages/loading-overlay/index.tsx","packages/paginator/style.ts","packages/paginator/index.tsx","packages/helpers/arrayHasData.ts","packages/table/partials/TableControlButtons.tsx","packages/table/helpers/calculateCellStringWidthToPixelNumber.ts","packages/table/helpers/generateFixedColumns.ts","packages/table/style.ts","packages/table/partials/HeadCellRenderer.tsx","packages/table/partials/TableHeader.tsx","packages/table/partials/BodyCellRenderer.tsx","packages/table/partials/TableBody.tsx","packages/helpers/totalFromArray.ts","packages/table/partials/TotalCellRender.tsx","packages/table/partials/FloatingLabelsTotalCells.tsx","packages/table/helpers/createExcelFunction.ts","packages/table/Table.tsx","packages/table-with-api-query/hooks/useTableControlsButtons.ts","packages/table-with-api-query/hooks/useCreateTableActionRef.ts","packages/table-with-api-query/index.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { Checkbox } from \"antd\";\r\nimport { primaryColors } from \"../constants\";\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nexport const StyledCheckBox = styled(Checkbox)<CheckBoxProps>`\r\n  padding: 4px 7px;\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n  margin: ${({ margin }) => margin};\r\n  ${({ required }) => required && `background-color: ${primaryColors.danger};`}\r\n`;\r\n","import { memo, useCallback } from \"react\";\r\nimport { useTranslateId } from \"../translation-layer\";\r\nimport { StyledCheckBox } from \"./style\";\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nconst CheckBox = ({\r\n  label = \"\",\r\n  checked,\r\n  onChange,\r\n  name,\r\n  width,\r\n  height,\r\n  disabled,\r\n  required,\r\n  margin,\r\n}: CheckBoxProps) => {\r\n  const handleChange = useCallback(\r\n    (event: { target: { checked: boolean } }) => {\r\n      onChange({ name: name, value: event.target.checked });\r\n    },\r\n    [name, onChange]\r\n  );\r\n\r\n  const translate = useTranslateId();\r\n\r\n  return (\r\n    <StyledCheckBox\r\n      onChange={handleChange}\r\n      checked={checked}\r\n      width={width}\r\n      height={height}\r\n      disabled={disabled}\r\n      margin={margin}\r\n      required={required}\r\n    >\r\n      {translate(label)}\r\n    </StyledCheckBox>\r\n  );\r\n};\r\n\r\nexport default memo(CheckBox);\r\n","import { notification } from \"antd\";\r\n\r\nconst createNotification = (\r\n  type: \"success\" | \"info\" | \"warning\" | \"error\",\r\n  message?: string,\r\n  description?: string,\r\n  persist: boolean | number = false\r\n) => {\r\n  let msg = \"\";\r\n\r\n  switch (type) {\r\n    case \"success\":\r\n      msg = \"Done Successfully\";\r\n      break;\r\n\r\n    case \"error\":\r\n      msg = \"False Save\";\r\n      break;\r\n  }\r\n\r\n  notification[type]({\r\n    message: message || msg,\r\n    description: description ? description : \"\",\r\n    duration: persist === true ? 0 : ~~(persist || 2.5),\r\n  });\r\n};\r\n\r\nexport default createNotification;\r\n","import { memo, useCallback } from \"react\";\r\nimport Modal from \"../modal\";\r\nimport { confirmationModal } from \"../types\";\r\n\r\nconst ConfirmationModal = ({\r\n  visible,\r\n  onClose,\r\n  onConfirm,\r\n  message,\r\n}: confirmationModal) => {\r\n  const handleConfirmation = useCallback(() => {\r\n    onConfirm();\r\n    onClose();\r\n  }, [onClose, onConfirm]);\r\n\r\n  return (\r\n    <Modal\r\n      label=\"cnfrmtn\"\r\n      visible={visible}\r\n      onClose={onClose}\r\n      width=\"25%\"\r\n      onOK={handleConfirmation}\r\n      submitTitle=\"cnfrm\"\r\n    >\r\n      {message ? message : \"Are you want to continue ?\"}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(ConfirmationModal);\r\n","import { memo } from \"react\";\r\nimport { Loading, Overlay } from \"./style\";\r\n\r\nconst LoadingOverLay = ({ opacity, visible, backColor }: any) => {\r\n  return (\r\n    <Overlay opacity={opacity} visible={visible} backColor={backColor}>\r\n      <Loading />\r\n    </Overlay>\r\n  );\r\n};\r\n\r\nexport default memo(LoadingOverLay);\r\n","import styled from \"styled-components\";\r\n\r\nexport const PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const PageButton = styled.button<{ active: boolean }>`\r\n  margin: 0 5px;\r\n  padding: 8px 12px;\r\n  cursor: pointer;\r\n  background-color: ${({ active }) => (active ? \"#3498db\" : \"#fff\")};\r\n  color: ${({ active }) => (active ? \"#fff\" : \"#3498db\")};\r\n  border: 1px solid #3498db;\r\n  border-radius: 4px;\r\n`;\r\n\r\nexport const TotalRecordView = styled.div`\r\n  margin: 0 5px;\r\n  padding: 8px 12px;\r\n  background-color: #fff;\r\n  color: \"#3498db\";\r\n  border: 2px solid #3498db;\r\n  border-radius: 4px;\r\n  /* width: 40px; */\r\n  justify-content: center;\r\n  text-align: center;\r\n`;\r\n","import { memo } from \"react\";\r\nimport { PaginationContainer, PageButton, TotalRecordView } from \"./style\"\r\nimport { PaginationProps } from \"./index.interface\"\r\n\r\nconst Pagination = ({ currentPage, onPageChange, totalRecord, step }: PaginationProps) => {\r\n\r\n  const totalPages = Math.ceil(totalRecord / step);\r\n  const pageNumbers = Array.from({ length: totalPages }, (_, index) => index + 1);\r\n\r\n  return (\r\n    <PaginationContainer>\r\n      {pageNumbers.length !== 1 && pageNumbers.map(number => (\r\n        <PageButton\r\n          key={number}\r\n          active={number === currentPage}\r\n          onClick={() => onPageChange(number)}\r\n          disabled={number === currentPage}\r\n        >\r\n          {number}\r\n        </PageButton>\r\n      ))}\r\n      <TotalRecordView>\r\n        {`total Records is ${totalRecord}`}\r\n      </TotalRecordView>\r\n    </PaginationContainer>\r\n  );\r\n};\r\n\r\nexport default memo(Pagination);","const arrayHasData = (arr?: any[] | any) => {\r\n  return Array.isArray(arr) && arr.length !== 0;\r\n};\r\n\r\nexport default arrayHasData;\r\n","import { memo } from \"react\";\r\nimport Flex from \"../../flex\";\r\nimport Button from \"../../button\";\r\nimport IconButton from \"../../icon-button\";\r\nimport { tableControlButtonsProp } from \"../../types\";\r\n\r\nconst TableControlButtons = ({\r\n  hideTools = false,\r\n  canAdd,\r\n  canEdit,\r\n  canDelete,\r\n  canSave,\r\n  canPrint,\r\n  canExcel,\r\n  onAdd,\r\n  onEdit,\r\n  onDelete,\r\n  onSave,\r\n  onPrint,\r\n  onExcel,\r\n  addDisabled,\r\n  editDisabled,\r\n  deleteDisabled,\r\n  saveDisabled,\r\n  printDisabled,\r\n  excelDisabled,\r\n  additionalButtons,\r\n  withInfo,\r\n  onInfo,\r\n  infoDisabled\r\n}: tableControlButtonsProp) => (\r\n  <Flex\r\n    width=\"100%\"\r\n    padding=\"0\"\r\n    margin=\"5px 0\"\r\n    // bordered\r\n    borderColor=\"red\"\r\n    justifyContent=\"center\"\r\n    hidden={hideTools}\r\n    gap=\"10px\"\r\n  >\r\n    {additionalButtons &&\r\n      Array.isArray(additionalButtons) &&\r\n      additionalButtons.map((record) => {\r\n        if (record.icon) {\r\n          return (\r\n            <IconButton\r\n              //@ts-ignore\r\n              iconName={record.icon}\r\n              onClick={record.onClick}\r\n              width={record.width}\r\n              backGround=\"transparent\"\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <Button\r\n              label={record.label}\r\n              onClick={record.onClick}\r\n              width={record.width}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    <IconButton\r\n      iconName=\"edit\"\r\n      onClick={onEdit}\r\n      hidden={!canEdit}\r\n      disabled={editDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"delete\"\r\n      onClick={onDelete}\r\n      hidden={!canDelete}\r\n      disabled={deleteDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"plus\"\r\n      onClick={onAdd}\r\n      hidden={!canAdd}\r\n      disabled={addDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"save\"\r\n      onClick={onSave}\r\n      hidden={!canSave}\r\n      disabled={saveDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"print\"\r\n      onClick={onPrint}\r\n      hidden={!canPrint}\r\n      disabled={printDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"excel\"\r\n      onClick={onExcel}\r\n      hidden={!canExcel}\r\n      disabled={excelDisabled}\r\n    />\r\n    <IconButton\r\n      iconName=\"info\"\r\n      onClick={onInfo}\r\n      disabled={infoDisabled}\r\n      hidden={!withInfo}\r\n    />\r\n  </Flex>\r\n);\r\n\r\nexport default memo(TableControlButtons);\r\n","const calculateCellStringWidthToPixelNumber = (\r\n  totalWidth: number,\r\n  cellWidth?: string | number\r\n) => {\r\n  if (!cellWidth) {\r\n    return cellWidth as undefined;\r\n  }\r\n\r\n  const insuredNoSpacesCellWidth = cellWidth.toString().replace(/\\s/g, \"\");\r\n\r\n  const isGivenStringAlreadyNumber = !isNaN(+insuredNoSpacesCellWidth);\r\n\r\n  if (isGivenStringAlreadyNumber) {\r\n    return +insuredNoSpacesCellWidth as number;\r\n  }\r\n\r\n  const [actualCellWidth] = insuredNoSpacesCellWidth.split(\"%\");\r\n\r\n  return +((+actualCellWidth / 100) * totalWidth).toFixed(2) as number;\r\n};\r\n\r\nexport default calculateCellStringWidthToPixelNumber;\r\n","import calculateCellStringWidthToPixelNumber from \"./calculateCellStringWidthToPixelNumber\";\r\n//   import getCheckableInputRenderedValue from \"./getCheckableInputRenderedValue\";\r\n//   import getSelectRenderedValue from \"./getSelectRenderedValue\";\r\n\r\nconst generateFixedColumns = ({\r\n  containerWidthNumber,\r\n  columnsFromProps,\r\n  hasSelectionColumn,\r\n  showExpandColumn,\r\n  isMobileBreakPoint,\r\n}: any) => {\r\n  const columnsCount = columnsFromProps?.length ?? 0;\r\n  let doesAnyColumnHasInputType = false;\r\n\r\n  if (!columnsCount) {\r\n    return {\r\n      doesAnyColumnHasInputType,\r\n      adjustedColumns: [],\r\n    };\r\n  }\r\n\r\n  const eachCellWidthAmountFromSelectionColumn = hasSelectionColumn\r\n    ? columnsCount / 30\r\n    : 0;\r\n  const eachCellWidthAmountFromExpandColumn = showExpandColumn\r\n    ? columnsCount / 30\r\n    : 0;\r\n\r\n  const adjustedColumns = columnsFromProps.map(\r\n    ({\r\n      width,\r\n      //   inputProps,\r\n      //   render,\r\n      title,\r\n      //   widthIfMobileBreakPoint,\r\n      //   hiddenIfMobileBreakPoint,\r\n      ...column\r\n    }: any) => {\r\n      //   const { selectOptions, inputType } = inputProps || {};\r\n\r\n      //   if (!doesAnyColumnHasInputType) {\r\n      //     doesAnyColumnHasInputType = !!inputType;\r\n      //   }\r\n\r\n      //   const isCheckBox = inputType === \"checkbox\";\r\n      //   const isSelectField = inputType === \"select\";\r\n\r\n      //   const actualRenderMethod = render\r\n      //     ? render\r\n      //     : isCheckBox\r\n      //     ? getCheckableInputRenderedValue\r\n      //     : isSelectField\r\n      //     ? getSelectRenderedValue(selectOptions)\r\n      //     : undefined;\r\n\r\n      let fixedWidth = calculateCellStringWidthToPixelNumber(\r\n        containerWidthNumber,\r\n        width\r\n      );\r\n\r\n      fixedWidth = fixedWidth\r\n        ? fixedWidth -\r\n          eachCellWidthAmountFromSelectionColumn -\r\n          eachCellWidthAmountFromExpandColumn\r\n        : fixedWidth;\r\n\r\n      return {\r\n        ...column,\r\n        title,\r\n        // inputProps,\r\n        // render: actualRenderMethod,\r\n        width: fixedWidth,\r\n      };\r\n    }\r\n  );\r\n\r\n  return {\r\n    //   doesAnyColumnHasInputType,\r\n    adjustedColumns: adjustedColumns,\r\n  };\r\n};\r\n\r\nexport default generateFixedColumns;\r\n","import styled, { css } from \"styled-components\";\r\nimport { primaryColors } from \"../constants\";\r\nimport { BaseTitle } from \"../page-title\";\r\n\r\nconst getCellWidth = (width: string | number) =>\r\n  !isNaN(+width) ? `${width}px` : width;\r\n\r\nexport const TableContainer = styled.div<any>`\r\n  position: relative;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  width: ${({ width }) => width};\r\n  ${({ margin }) => margin && `margin: ${margin}`};\r\n  ${({ padding }) => padding && `padding: ${padding}`};\r\n  ${({ order }) => order && `order: ${order}`};\r\n`;\r\n\r\nexport const TableContentWrapper = styled.div<any>`\r\n  width: 100%;\r\n  max-height: ${({ height }) => height};\r\n  overflow-y: ${({ overflowY }) => overflowY};\r\n  position: relative;\r\n  height: ${({ fixedHeight }) => fixedHeight};\r\n  overflow-x: auto;\r\n`;\r\n\r\nexport const StyledHeader = styled.thead<any>`\r\n  background-color: ${primaryColors.primary};\r\n  color: ${primaryColors.white};\r\n`;\r\n\r\nexport const StyledTable = styled.table<any>`\r\n  border-collapse: separate;\r\n  table-layout: auto;\r\n  border-spacing: 0;\r\n  max-width: 100%;\r\n  ${({ fixedHeight }) => fixedHeight && `height: ${fixedHeight}`}\r\n`;\r\n\r\nexport const StyledTableRowCell = styled.td<any>`\r\n  position: relative;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0.1px solid ${primaryColors.inputBorderColor};\r\n  color: currentColor;\r\n  font-size: ${({ fontSize }) => fontSize};\r\n  ${({ isHeadCell }) =>\r\n    isHeadCell &&\r\n    `\r\n    background-color: ${primaryColors.primary};\r\n    position: sticky;\r\n    top: 0;\r\n    font-weight: bold;\r\n    z-index: 1;\r\n  `};\r\n  ${({ width }) =>\r\n    width &&\r\n    `\r\n    width: ${getCellWidth(width)};\r\n  `};\r\n\r\n  ${({ noBorder }) =>\r\n    !noBorder &&\r\n    `\r\n  `};\r\n\r\n  ${({ disabled }) =>\r\n    disabled &&\r\n    `\r\n    cursor: not-allowed;\r\n  `};\r\n  transition: all 0.3s ease;\r\n`;\r\n\r\nexport const ellipsisCss = css`\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`;\r\n\r\nexport const CellContentWrapper = styled(BaseTitle)<any>`\r\n  display: flex;\r\n  ${({ justify, align }) => `\r\n    justify-content: ${justify || \"cen ter\"};\r\n    align-items: ${align || \"center\"};\r\n  `}\r\n  position: relative;\r\n  ${({ display }) => display && `display: ${display}`};\r\n  width: ${({ width }) => (width ? getCellWidth(width) : \"unset\")};\r\n  ${({ ellipsis }) => ellipsis === \"true\" && ellipsisCss}\r\n  text-align: ${({ align }) => align || \"center\"};\r\n  font-size: inherit;\r\n  color: inherit;\r\n  justify-content: ${({ align }) => align || \"center\"};\r\n  padding: ${({ padding }) => padding || \"3px\"};\r\n  ${({ minHeight }) => minHeight && `min-height: ${minHeight}`};\r\n  ${({ useInlineEndBorder }) =>\r\n    useInlineEndBorder &&\r\n    `\r\n    &:not(:last-child) {\r\n      border-inline-end: 1px solid red;\r\n    }\r\n  `};\r\n  ${({ color, backgroundColor }) =>\r\n    css`\r\n      background-color: ${backgroundColor || \"unset\"};\r\n      color: ${color || \"unset\"};\r\n    `};\r\n  word-break: unset;\r\n  word-wrap: anywhere;\r\n  transition: all 0.3s ease-in-out;\r\n`;\r\nCellContentWrapper.defaultProps = {\r\n  tag: \"div\",\r\n};\r\n\r\nexport const BodyRow = styled.tr<any>`\r\n  ${({ selected, selectedRowBackgroundColor }) =>\r\n    !!selected\r\n      ? //@ts-ignore\r\n        `background-color: ${primaryColors[selectedRowBackgroundColor]}`\r\n      : `background-color: ${primaryColors.white2}`};\r\n  transition: all 0.3s ease-in-out;\r\n`;\r\n","import { memo } from \"react\";\r\nimport { CellContentWrapper } from \"../style\";\r\n\r\nconst HeadCellRenderer = ({ align, width, ellipsis, title }: any) => (\r\n  <CellContentWrapper\r\n    display=\"block\"\r\n    align={align}\r\n    width={width}\r\n    title={ellipsis ? title : \"\"}\r\n    ellipsis={ellipsis ? \"true\" : undefined}\r\n  >\r\n    {title}\r\n  </CellContentWrapper>\r\n);\r\n\r\nexport default memo(HeadCellRenderer);\r\n","import { memo } from \"react\";\r\nimport HeadCellRenderer from \"./HeadCellRenderer\";\r\nimport { StyledHeader, StyledTableRowCell } from \"../style\";\r\n\r\nconst TableHeader = ({\r\n  columns,\r\n  actionColumn,\r\n  actionLabel,\r\n  actionWidth,\r\n}: any) => (\r\n  <>\r\n    <StyledHeader>\r\n      <tr>\r\n        {columns?.map((record: any) => {\r\n          return (\r\n            <>\r\n              <StyledTableRowCell isHeadCell>\r\n                <HeadCellRenderer {...record} />\r\n              </StyledTableRowCell>\r\n            </>\r\n          );\r\n        })}\r\n        {actionColumn && (\r\n          <StyledTableRowCell isHeadCell>\r\n            <HeadCellRenderer title={actionLabel} width={actionWidth} />\r\n          </StyledTableRowCell>\r\n        )}\r\n      </tr>\r\n    </StyledHeader>\r\n  </>\r\n);\r\n\r\nexport default memo(TableHeader);\r\n","import { memo } from \"react\";\r\nimport { CellContentWrapper } from \"../style\";\r\n\r\nconst BodyCellRenderer = ({\r\n  currentRecord,\r\n  rowCellClassName,\r\n  cellProps: {\r\n    dataIndex,\r\n    width,\r\n    ellipsis,\r\n    align,\r\n    valueFixedBy,\r\n    titleDataIndex,\r\n  },\r\n}: any) => {\r\n  const valueOfDataIndex = currentRecord[dataIndex];\r\n\r\n  let cellBodyValue = valueOfDataIndex;\r\n\r\n  if (typeof cellBodyValue === \"boolean\") {\r\n    cellBodyValue = cellBodyValue === true ? \"✓\" : \"X\";\r\n  }\r\n\r\n  const cellTitle = titleDataIndex ? currentRecord[titleDataIndex] : \"\";\r\n\r\n  const { record_foreground_color, record_background_color } =\r\n    currentRecord || {};\r\n\r\n  return (\r\n    <CellContentWrapper\r\n      align={align}\r\n      width={width}\r\n      ellipsis={ellipsis ? \"true\" : undefined}\r\n      disableTranslation\r\n      title={cellTitle}\r\n      color={record_foreground_color}\r\n      backgroundColor={record_background_color}\r\n      className={rowCellClassName?.(currentRecord, dataIndex)}\r\n    >\r\n      {cellBodyValue}\r\n    </CellContentWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(BodyCellRenderer);\r\n","import { memo, Fragment } from \"react\";\r\nimport Flex from \"../../flex\";\r\nimport Button from \"../../button\";\r\nimport IconButton from \"../../icon-button\";\r\nimport BodyCellRenderer from \"./BodyCellRenderer\";\r\nimport { StyledTableRowCell, BodyRow } from \"../style\";\r\n\r\nconst TableBody = ({\r\n  columns,\r\n  actionColumn,\r\n  dataSource,\r\n  rowKey,\r\n  handleSelectedRow,\r\n  onDoubleClick,\r\n  selectedRowBackgroundColor,\r\n  clickedRowKey,\r\n  isRowChecked,\r\n  indexOfFirstItem,\r\n  fontSize,\r\n}: any) => (\r\n  <tbody>\r\n    {dataSource?.map((record: any, index: number) => {\r\n      const currentRecordIndex = (indexOfFirstItem || 0) + index;\r\n      const currentRowKey = record[rowKey];\r\n      return (\r\n        <Fragment key={currentRowKey}>\r\n          <BodyRow\r\n            selectedRowBackgroundColor={selectedRowBackgroundColor}\r\n            onClick={handleSelectedRow(currentRowKey, record, index)}\r\n            onDoubleClick={onDoubleClick(currentRowKey, record, index)}\r\n            selected={isRowChecked || clickedRowKey === currentRowKey}\r\n          >\r\n            {columns.map((cellProps: any) => {\r\n              const { titleDataIndex } = cellProps;\r\n\r\n              const sharedProps = {\r\n                currentRecordIndex,\r\n                currentRecord: record,\r\n                fontSize,\r\n                titleDataIndex,\r\n              };\r\n\r\n              return (\r\n                <StyledTableRowCell>\r\n                  <BodyCellRenderer {...sharedProps} cellProps={cellProps} />\r\n                </StyledTableRowCell>\r\n              );\r\n            })}\r\n            {actionColumn && (\r\n              <StyledTableRowCell>\r\n                <Flex width=\"100%\">\r\n                  {actionColumn.map((actionButton: any) => {\r\n                    if (actionButton.icon) {\r\n                      return (\r\n                        <IconButton\r\n                          {...actionButton}\r\n                          onClick={() => {\r\n                            actionButton.onClick(record, index);\r\n                          }}\r\n                        />\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Button\r\n                        {...actionButton}\r\n                        onClick={() => {\r\n                          actionButton.onClick(record, index);\r\n                        }}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Flex>\r\n              </StyledTableRowCell>\r\n            )}\r\n          </BodyRow>\r\n        </Fragment>\r\n      );\r\n    })}\r\n  </tbody>\r\n);\r\n\r\nexport default memo(TableBody);\r\n","const totalFromArray = (array: any[], index: string) => {\r\n  let value = 0;\r\n  array.forEach((record) => {\r\n    value = +value + +record[index];\r\n  });\r\n\r\n  return value.toFixed(1);\r\n};\r\n\r\nexport default totalFromArray;\r\n","import { memo } from \"react\";\r\nimport { totalFromArray } from \"../../helpers\";\r\nimport { CellContentWrapper } from \"../style\";\r\n\r\nconst TotalCellRender = ({\r\n  align,\r\n  width,\r\n  ellipsis,\r\n  dataIndex,\r\n  calculateAmount,\r\n  dataSource,\r\n}: any) => (\r\n  <>\r\n    <CellContentWrapper\r\n      display=\"block\"\r\n      align={align}\r\n      width={width}\r\n      ellipsis={ellipsis ? \"true\" : undefined}\r\n      disableTranslation\r\n    >\r\n      {calculateAmount && totalFromArray(dataSource, dataIndex)}\r\n    </CellContentWrapper>\r\n  </>\r\n);\r\n\r\nexport default memo(TotalCellRender);\r\n","import { memo } from \"react\";\r\nimport TotalCellRender from \"./TotalCellRender\";\r\nimport { StyledTableRowCell } from \"../style\";\r\n\r\nconst TableHeader = ({\r\n  columns,\r\n  actionColumn,\r\n  actionLabel,\r\n  actionWidth,\r\n  dataSource,\r\n}: any) => {\r\n  return (\r\n    <>\r\n      <tr>\r\n        {columns?.map((record: any) => {\r\n          return (\r\n            <>\r\n              <StyledTableRowCell>\r\n                <TotalCellRender {...record} dataSource={dataSource} />\r\n              </StyledTableRowCell>\r\n            </>\r\n          );\r\n        })}\r\n        {actionColumn && (\r\n          <StyledTableRowCell isHeadCell>\r\n            {/* <CellContentWrapper\r\n                                title={actionLabel}\r\n                                width={actionWidth}\r\n                            /> */}\r\n          </StyledTableRowCell>\r\n        )}\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(TableHeader);\r\n","import { useLocation } from \"react-router-dom\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst useCreateExcel = ({ fileName, dataSource, columns }: any) => {\r\n  const { pathname } = useLocation();\r\n\r\n  const createExcelFun = () => {\r\n    const pathName = pathname.replace(\"/\", \"\");\r\n    const wb = XLSX.utils.book_new(),\r\n      //@ts-ignore\r\n      ws = XLSX.utils.json_to_sheet(dataSource);\r\n    XLSX.utils.book_append_sheet(wb, ws, pathName);\r\n    XLSX.writeFile(wb, fileName);\r\n  };\r\n\r\n  return createExcelFun;\r\n};\r\n\r\nexport default useCreateExcel;\r\n","import { useState, useCallback, useMemo, useLayoutEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport LoadingOverLay from \"../loading-overlay\";\r\nimport { useBoundingClientRect } from \"../hooks\";\r\nimport { Text } from \"../page-title\";\r\nimport Flex from \"../flex\";\r\nimport createNotification from \"../notification\";\r\nimport Pagination from \"../paginator\"\r\nimport { arrayHasData } from \"../helpers\"\r\nimport TableControlButtons from \"./partials/TableControlButtons\";\r\nimport generateFixedColumns from \"./helpers/generateFixedColumns\";\r\nimport TableHeader from \"./partials/TableHeader\";\r\nimport TableBody from \"./partials/TableBody\";\r\nimport FloatingLabelsTotalCells from \"./partials/FloatingLabelsTotalCells\";\r\nimport createExcelFunction from \"./helpers/createExcelFunction\";\r\nimport { TableContainer, TableContentWrapper, StyledTable } from \"./style\";\r\nimport { TableProps, RecordWithAnyData } from \"../types\";\r\n\r\nconst Table = ({\r\n  dataSource,\r\n  height,\r\n  fixedHeight,\r\n  rowKey = \"rowKey\",\r\n  columns,\r\n  hideTools = true,\r\n  canEdit = false,\r\n  canAdd = false,\r\n  canDelete = false,\r\n  canExcel = false,\r\n  onAdd,\r\n  onEdit,\r\n  onDelete,\r\n  actionColumn,\r\n  actionLabel = \"\",\r\n  actionWidth,\r\n  onSelectedRow,\r\n  canPrint = false,\r\n  onPrint,\r\n  additionalButtons,\r\n  onSave,\r\n  canSave = false,\r\n  withInfo = true,\r\n  onInfo,\r\n  width = \"100%\",\r\n  margin,\r\n  padding,\r\n  loading = false,\r\n  onDoubleClick,\r\n  selectedRowBackgroundColor = \"lightBlue\",\r\n  addDisabled,\r\n  editDisabled,\r\n  deleteDisabled,\r\n  saveDisabled,\r\n  printDisabled,\r\n  excelDisabled,\r\n  overflowY,\r\n  noPagination = false,\r\n  useFloatingLabelsTotalCells,\r\n  pagination = 0,\r\n  step = 0,\r\n  onChangeCurrentPage\r\n}: TableProps) => {\r\n  const { pathname } = useLocation();\r\n  const [clickedRowKey, setClickedRow] = useState();\r\n  const [selectRow, setSelectedRow] = useState<RecordWithAnyData>({});\r\n  const isArrayHasData = arrayHasData(dataSource);\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n\r\n  const computedDataSource = step ? dataSource?.slice((currentPage - 1) * step, (currentPage) * step) : dataSource\r\n  const actualData = arrayHasData(computedDataSource) ? computedDataSource : dataSource\r\n\r\n  useLayoutEffect(() => {\r\n    if (loading) {\r\n      setClickedRow(undefined);\r\n    }\r\n  }, [loading]);\r\n\r\n  const onRowClick = useCallback(\r\n    //@ts-ignore\r\n    (currentRowKey, currentRecord, recordIndex) => () => {\r\n      setClickedRow(currentRowKey);\r\n      onSelectedRow?.(currentRecord, recordIndex);\r\n      setSelectedRow(currentRecord)\r\n    },\r\n    [onSelectedRow]\r\n  );\r\n\r\n  const handleDouble = useCallback(\r\n    //@ts-ignore\r\n    (currentRowKey, currentRecord, recordIndex) => () => {\r\n      setClickedRow(currentRowKey);\r\n      onDoubleClick?.(currentRecord, recordIndex);\r\n    },\r\n    [onDoubleClick]\r\n  );\r\n\r\n  const pathName = pathname.replace(\"/\", \"\");\r\n  const excelFun = createExcelFunction({\r\n    fileName: `${pathName} ${new Date().toUTCString()}.xlsx`,\r\n    dataSource: dataSource,\r\n    columns: columns,\r\n  });\r\n\r\n  const tableColumnsLength = columns.length;\r\n\r\n  const [elementRef, rect] = useBoundingClientRect([\r\n    tableColumnsLength,\r\n    loading,\r\n  ]);\r\n\r\n  const containerWidthNumber = rect?.width ?? 200;\r\n\r\n  const { adjustedColumns } = useMemo(\r\n    () =>\r\n      generateFixedColumns({\r\n        containerWidthNumber,\r\n        columnsFromProps: columns,\r\n      }),\r\n    [containerWidthNumber, columns]\r\n  );\r\n\r\n  const handleInfo = useCallback(() => {\r\n    const { created_at, updated_at } = selectRow\r\n    created_at && createNotification('info', `Create At ${created_at} Updated At ${updated_at}`, '', 5)\r\n  }, [selectRow]);\r\n\r\n  const handleChangeCurrentPage = useCallback((page: number) => {\r\n    setCurrentPage(page);\r\n    onChangeCurrentPage && onChangeCurrentPage(page)\r\n  }, [onChangeCurrentPage])\r\n\r\n  return (\r\n    <>\r\n      <TableContainer\r\n        width={width}\r\n        padding={padding}\r\n        margin={margin}\r\n        ref={elementRef}\r\n      >\r\n        <TableControlButtons\r\n          hideTools={hideTools}\r\n          canAdd={canAdd}\r\n          canEdit={canEdit}\r\n          canDelete={canDelete}\r\n          canSave={canSave}\r\n          canPrint={canPrint}\r\n          canExcel={canExcel}\r\n          onAdd={onAdd}\r\n          onEdit={onEdit}\r\n          onDelete={onDelete}\r\n          onSave={onSave}\r\n          onPrint={onPrint}\r\n          onExcel={excelFun}\r\n          addDisabled={addDisabled}\r\n          editDisabled={editDisabled || !clickedRowKey}\r\n          deleteDisabled={deleteDisabled || !clickedRowKey}\r\n          saveDisabled={saveDisabled}\r\n          printDisabled={printDisabled}\r\n          excelDisabled={excelDisabled}\r\n          additionalButtons={additionalButtons}\r\n          withInfo={withInfo}\r\n          infoDisabled={!clickedRowKey}\r\n          onInfo={onInfo || handleInfo}\r\n        />\r\n        <TableContentWrapper\r\n          height={height}\r\n          overflowY={overflowY}\r\n          fixedHeight={fixedHeight}\r\n        >\r\n          <StyledTable cellSpacing={0}>\r\n            <TableHeader\r\n              columns={adjustedColumns}\r\n              actionColumn={actionColumn}\r\n              actionLabel={actionLabel}\r\n              actionWidth={actionWidth}\r\n            />\r\n\r\n            <TableBody\r\n              columns={adjustedColumns}\r\n              actionColumn={actionColumn}\r\n              dataSource={actualData}\r\n              rowKey={rowKey}\r\n              handleSelectedRow={onRowClick}\r\n              onDoubleClick={handleDouble}\r\n              selectedRowBackgroundColor={selectedRowBackgroundColor}\r\n              clickedRowKey={clickedRowKey}\r\n            />\r\n          </StyledTable>\r\n          {isArrayHasData &&\r\n            useFloatingLabelsTotalCells && (\r\n              <tfoot>\r\n                <FloatingLabelsTotalCells\r\n                  dataSource={dataSource}\r\n                  columns={adjustedColumns}\r\n                />\r\n              </tfoot>\r\n            )}\r\n        </TableContentWrapper>\r\n        {isArrayHasData &&\r\n          !noPagination &&\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            totalRecord={pagination}\r\n            onPageChange={handleChangeCurrentPage}\r\n            step={step}\r\n          />}\r\n        {!isArrayHasData &&\r\n          !fixedHeight && (\r\n            <Flex width=\"100%\" justifyContent=\"center\">\r\n              <Text title=\"ntd\" color=\"red\" fontWeight=\"bold\" />\r\n            </Flex>\r\n          )}\r\n        {loading && <LoadingOverLay visible={loading} />}\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useMutation, useModalVisibility } from \"../../hooks\";\r\nimport createNotification from \"../../notification\";\r\nimport { RecordWithAnyData, useTableControlsButtonsType } from \"../../types\";\r\n\r\nconst useTableControlsButtons = ({\r\n  apiId,\r\n  runFetch,\r\n}: useTableControlsButtonsType) => {\r\n  const [selectedRecord, setSelectedRecord] = useState<RecordWithAnyData>({});\r\n  const { visible, handleClose, handleOpen } = useModalVisibility();\r\n\r\n  const { mutate, loading } = useMutation({\r\n    apiId,\r\n    method: \"POST\",\r\n  });\r\n\r\n  const handleAdd = useCallback(() => {\r\n    handleOpen();\r\n    setSelectedRecord({ query_status: \"n\" });\r\n  }, [handleOpen]);\r\n\r\n  const handleEdit = useCallback(() => {\r\n    handleOpen();\r\n    setSelectedRecord({ ...selectedRecord, query_status: \"u\" });\r\n  }, [handleOpen, selectedRecord]);\r\n\r\n  const handleDelete = useCallback(() => {\r\n    mutate({\r\n      data: { ...selectedRecord, query_status: \"d\" },\r\n      cb: ({ error }) => {\r\n        error && createNotification(\"error\", error.message);\r\n        if (!error) {\r\n          runFetch && runFetch();\r\n        }\r\n      },\r\n    });\r\n  }, [mutate, runFetch, selectedRecord]);\r\n\r\n  return {\r\n    selectedRecord,\r\n    setSelectedRecord,\r\n    visible,\r\n    handleClose,\r\n    handleAdd,\r\n    handleEdit,\r\n    handleDelete,\r\n    handleSaveRecord: mutate,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useRef, useCallback } from \"react\";\r\nimport { TableForwardedValuesForRef, RecordWithAnyData } from \"../../types\";\r\n\r\nconst useCreateTableActionRef = () => {\r\n  const tableRef = useRef<TableForwardedValuesForRef>();\r\n\r\n  const fetchTableData = useCallback(\r\n    async (params?: RecordWithAnyData) => tableRef.current?.runFetch(params),\r\n    [tableRef]\r\n  );\r\n\r\n  const getTableData = useCallback(\r\n    () => tableRef.current?.getCurrentDataSource() || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const setTableData = useCallback(\r\n    (newTableData: RecordWithAnyData[]) =>\r\n      tableRef.current?.setTableData(newTableData) || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const resetTable = useCallback(\r\n    () => tableRef.current?.resetTableData() || [],\r\n    [tableRef]\r\n  );\r\n\r\n  return {\r\n    tableRef,\r\n    fetchTableData,\r\n    getTableData,\r\n    setTableData,\r\n    resetTable,\r\n  };\r\n};\r\n\r\nexport default useCreateTableActionRef;\r\n","import {\r\n  memo,\r\n  useState,\r\n  useCallback,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n  useMemo,\r\n} from \"react\";\r\nimport { useFetch, useEffectTimeOut, useModalVisibility } from \"../hooks\";\r\nimport ConfirmationModal from \"../confirmation-modal\";\r\nimport { Table } from \"../table\";\r\nimport { usePrivilegeLayer } from \"../privilege-layer\";\r\nimport {\r\n  TableWithApiProps,\r\n  TableForwardedRefType,\r\n  RecordWithAnyData,\r\n} from \"../types\";\r\n\r\nconst TableWithApi = (\r\n  {\r\n    apiId,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    printProps,\r\n    reportName,\r\n    disableAutoRefresh,\r\n    handleDelete,\r\n    handleAdd,\r\n    handleEdit,\r\n    canAdd,\r\n    canDelete,\r\n    canEdit,\r\n    canPrint,\r\n    usePrivilege = true,\r\n    ...tableProps\r\n  }: TableWithApiProps,\r\n  ref: TableForwardedRefType\r\n) => {\r\n  const { visible, handleClose, handleOpen } = useModalVisibility();\r\n  const [data, setData] = useState<RecordWithAnyData[]>([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const {\r\n    can_add,\r\n    can_edit,\r\n    can_delete,\r\n    can_print,\r\n    pagination,\r\n    refresh_time_out,\r\n  } = usePrivilegeLayer();\r\n\r\n  const handleFetchTableData = useCallback((response: RecordWithAnyData) => {\r\n    const { data, total_records } = response || {};\r\n    setData(data);\r\n    setTotalRecords(total_records);\r\n  }, []);\r\n\r\n  const { runFetch, loading, previousParams } = useFetch({\r\n    apiId,\r\n    fetchOnFirstRun,\r\n    params: {\r\n      ...params,\r\n      current_page: 1,\r\n      page_step: pagination,\r\n    },\r\n    checkForParams,\r\n    onResponse: handleFetchTableData,\r\n  });\r\n\r\n  const foundDataSource = useMemo(() => data, [data]);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    runFetch,\r\n    setTableData: setData,\r\n    resetTableData: () => {\r\n      setData([]);\r\n    },\r\n    getCurrentDataSource: () => foundDataSource,\r\n  }));\r\n\r\n  useEffectTimeOut(() => {\r\n    fetchOnFirstRun && !disableAutoRefresh && runFetch();\r\n  }, refresh_time_out);\r\n\r\n  const handleChangeCurrentPage = useCallback(\r\n    (currentPage: number) =>\r\n      runFetch({\r\n        ...previousParams,\r\n        current_page: currentPage,\r\n        page_step: pagination,\r\n      }),\r\n    [pagination, previousParams, runFetch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {visible && handleDelete && (\r\n        <ConfirmationModal\r\n          visible={visible}\r\n          onConfirm={handleDelete}\r\n          onClose={handleClose}\r\n        />\r\n      )}\r\n\r\n      <Table\r\n        dataSource={data}\r\n        columns={columns}\r\n        loading={loading}\r\n        onAdd={handleAdd}\r\n        onEdit={handleEdit}\r\n        onDelete={handleOpen}\r\n        canAdd={canAdd && (usePrivilege ? can_add : true)}\r\n        canDelete={canDelete && (usePrivilege ? can_delete : true)}\r\n        canEdit={canEdit && (usePrivilege ? can_edit : true)}\r\n        canPrint={canPrint && (usePrivilege ? can_print : true)}\r\n        pagination={totalRecord}\r\n        step={pagination}\r\n        onChangeCurrentPage={handleChangeCurrentPage}\r\n        {...tableProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n// @ts-ignore ignore react \"forwardRef\" for misleading types.\r\nexport default memo(forwardRef(TableWithApi)) as typeof TableWithApi;\r\nexport { default as useTableControlsButtons } from \"./hooks/useTableControlsButtons\";\r\nexport { default as useCreateTableActionRef } from \"./hooks/useCreateTableActionRef\";\r\n"],"names":["StyledCheckBox","styled","Checkbox","_templateObject","_taggedTemplateLiteral","_ref","width","_ref2","height","_ref3","margin","_ref4","required","concat","primaryColors","danger","CheckBox","label","checked","onChange","name","disabled","handleChange","useCallback","event","value","target","translate","useTranslateId","_jsx","children","memo","type","message","description","persist","arguments","length","undefined","msg","notification","duration","ConfirmationModal","visible","onClose","onConfirm","handleConfirmation","Modal","onOK","submitTitle","LoadingOverLay","opacity","backColor","Overlay","Loading","PaginationContainer","div","PageButton","button","_templateObject2","active","TotalRecordView","_templateObject3","Pagination","currentPage","onPageChange","totalRecord","step","totalPages","Math","ceil","pageNumbers","Array","from","_","index","_jsxs","map","number","onClick","arr","isArray","TableControlButtons","hideTools","canAdd","canEdit","canDelete","canSave","canPrint","canExcel","onAdd","onEdit","onDelete","onSave","onPrint","onExcel","addDisabled","editDisabled","deleteDisabled","saveDisabled","printDisabled","excelDisabled","additionalButtons","withInfo","onInfo","infoDisabled","Flex","padding","borderColor","justifyContent","hidden","gap","record","icon","IconButton","iconName","backGround","Button","calculateCellStringWidthToPixelNumber","totalWidth","cellWidth","insuredNoSpacesCellWidth","toString","replace","isNaN","actualCellWidth","split","toFixed","_columnsFromProps$len","containerWidthNumber","columnsFromProps","hasSelectionColumn","showExpandColumn","isMobileBreakPoint","columnsCount","doesAnyColumnHasInputType","adjustedColumns","eachCellWidthAmountFromSelectionColumn","eachCellWidthAmountFromExpandColumn","title","column","fixedWidth","getCellWidth","TableContainer","order","TableContentWrapper","_ref5","_ref6","overflowY","_ref7","fixedHeight","StyledHeader","thead","primary","white","StyledTable","table","_templateObject4","_ref8","StyledTableRowCell","td","_templateObject5","inputBorderColor","_ref9","fontSize","_ref10","isHeadCell","_ref11","_ref12","noBorder","_ref13","ellipsisCss","css","_templateObject6","CellContentWrapper","BaseTitle","_templateObject7","_ref14","justify","align","_ref15","display","_ref16","_ref17","ellipsis","_ref18","_ref19","_ref20","_ref21","minHeight","_ref22","useInlineEndBorder","_ref23","color","backgroundColor","_templateObject8","defaultProps","tag","BodyRow","tr","_templateObject9","_ref24","selected","selectedRowBackgroundColor","white2","HeadCellRenderer","TableHeader","columns","actionColumn","actionLabel","actionWidth","_Fragment","BodyCellRenderer","currentRecord","rowCellClassName","cellProps","dataIndex","valueFixedBy","titleDataIndex","cellBodyValue","cellTitle","record_foreground_color","record_background_color","disableTranslation","className","TableBody","dataSource","rowKey","handleSelectedRow","onDoubleClick","clickedRowKey","isRowChecked","indexOfFirstItem","currentRecordIndex","currentRowKey","Fragment","sharedProps","actionButton","totalFromArray","array","forEach","TotalCellRender","calculateAmount","fileName","pathname","useLocation","createExcelFun","pathName","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","_rect$width","onSelectedRow","loading","noPagination","useFloatingLabelsTotalCells","pagination","onChangeCurrentPage","setClickedRow","useState","selectRow","setSelectedRow","isArrayHasData","arrayHasData","setCurrentPage","computedDataSource","slice","actualData","useLayoutEffect","onRowClick","recordIndex","handleDouble","excelFun","createExcelFunction","Date","toUTCString","tableColumnsLength","elementRef","rect","useBoundingClientRect","useMemo","generateFixedColumns","handleInfo","created_at","updated_at","createNotification","handleChangeCurrentPage","page","ref","cellSpacing","FloatingLabelsTotalCells","Text","fontWeight","apiId","runFetch","selectedRecord","setSelectedRecord","handleClose","handleOpen","useModalVisibility","mutate","useMutation","method","handleAdd","query_status","handleEdit","handleDelete","data","cb","error","handleSaveRecord","useCreateTableActionRef","tableRef","useRef","fetchTableData","async","_tableRef$current","current","params","getTableData","_tableRef$current2","getCurrentDataSource","setTableData","newTableData","_tableRef$current3","resetTable","_tableRef$current4","resetTableData","TableWithApi","ModalContent","fetchOnFirstRun","checkForParams","modalWidth","printProps","reportName","disableAutoRefresh","usePrivilege","tableProps","setData","setTotalRecords","can_add","can_edit","can_delete","can_print","refresh_time_out","usePrivilegeLayer","handleFetchTableData","response","total_records","previousParams","useFetch","current_page","page_step","onResponse","foundDataSource","useImperativeHandle","useEffectTimeOut","Table","forwardRef"],"sourceRoot":""}